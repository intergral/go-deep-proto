// Copyright 2019, Intergral GmbH
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.21.6
// source: deepproto/proto/tracepoint/v1/tracepoint.proto

package v1

import (
	v1 "github.com/intergral/go-deep-proto/common/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is the config of a tracepoint that should be installed by the application agent.
type TracePointConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID         string            `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`                                                                                             // The ID of the config
	Path       string            `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`                                                                                         // The path for the file to install in
	LineNumber uint32            `protobuf:"varint,3,opt,name=line_number,json=lineNumber,proto3" json:"line_number,omitempty"`                                                          // the line number to install on
	Args       map[string]string `protobuf:"bytes,4,rep,name=args,proto3" json:"args,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // arbitrary key/kay of config values (this can contain conditions, logs, fire counts etc)
	Watches    []string          `protobuf:"bytes,5,rep,name=watches,proto3" json:"watches,omitempty"`                                                                                   // expressions to evaluate at the this point of the code
}

func (x *TracePointConfig) Reset() {
	*x = TracePointConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deepproto_proto_tracepoint_v1_tracepoint_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TracePointConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TracePointConfig) ProtoMessage() {}

func (x *TracePointConfig) ProtoReflect() protoreflect.Message {
	mi := &file_deepproto_proto_tracepoint_v1_tracepoint_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TracePointConfig.ProtoReflect.Descriptor instead.
func (*TracePointConfig) Descriptor() ([]byte, []int) {
	return file_deepproto_proto_tracepoint_v1_tracepoint_proto_rawDescGZIP(), []int{0}
}

func (x *TracePointConfig) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *TracePointConfig) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *TracePointConfig) GetLineNumber() uint32 {
	if x != nil {
		return x.LineNumber
	}
	return 0
}

func (x *TracePointConfig) GetArgs() map[string]string {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *TracePointConfig) GetWatches() []string {
	if x != nil {
		return x.Watches
	}
	return nil
}

type VariableID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID        string   `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`               // the ID to use to look up in the snapshot 'var_lookup'
	Name      string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`           // the name of the variable at the point this ID is referenced
	Modifiers []string `protobuf:"bytes,3,rep,name=modifiers,proto3" json:"modifiers,omitempty"` // the modifiers (private, static etc) at the point this ID is referenced
}

func (x *VariableID) Reset() {
	*x = VariableID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deepproto_proto_tracepoint_v1_tracepoint_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VariableID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VariableID) ProtoMessage() {}

func (x *VariableID) ProtoReflect() protoreflect.Message {
	mi := &file_deepproto_proto_tracepoint_v1_tracepoint_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VariableID.ProtoReflect.Descriptor instead.
func (*VariableID) Descriptor() ([]byte, []int) {
	return file_deepproto_proto_tracepoint_v1_tracepoint_proto_rawDescGZIP(), []int{1}
}

func (x *VariableID) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *VariableID) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VariableID) GetModifiers() []string {
	if x != nil {
		return x.Modifiers
	}
	return nil
}

type Variable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type      string        `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`                  // the type of the variable (e.g string)
	Value     string        `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`                // the value of the variable as a string. All values are converted to string for simplicity. This can also result in the value being truncated if it is a very large string. Collection types should not be to stringed, instead a summary should be given as the value 'HashSet of size: 10'.
	Hash      string        `protobuf:"bytes,3,opt,name=hash,proto3" json:"hash,omitempty"`                  // This is the hash of the object, this is primarily of use in Java/Python, node does not really have global object ids, so this is less useful. However using the debugger apis we are exposed the object ID at the time of collection. This can change depending on the script location as well (e.g. the stack frame). We send this object ID hashed to obfuscate any data. For non object values (that do not have an object ID) we hash the value.
	Children  []*VariableID `protobuf:"bytes,4,rep,name=children,proto3" json:"children,omitempty"`          // This is a list of children of this variable, using the var ids, requiring them to be looked up in the var lookup
	Truncated *bool         `protobuf:"varint,5,opt,name=truncated,proto3,oneof" json:"truncated,omitempty"` // true if the value has been truncated
}

func (x *Variable) Reset() {
	*x = Variable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deepproto_proto_tracepoint_v1_tracepoint_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Variable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Variable) ProtoMessage() {}

func (x *Variable) ProtoReflect() protoreflect.Message {
	mi := &file_deepproto_proto_tracepoint_v1_tracepoint_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Variable.ProtoReflect.Descriptor instead.
func (*Variable) Descriptor() ([]byte, []int) {
	return file_deepproto_proto_tracepoint_v1_tracepoint_proto_rawDescGZIP(), []int{2}
}

func (x *Variable) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Variable) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *Variable) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *Variable) GetChildren() []*VariableID {
	if x != nil {
		return x.Children
	}
	return nil
}

func (x *Variable) GetTruncated() bool {
	if x != nil && x.Truncated != nil {
		return *x.Truncated
	}
	return false
}

type StackFrame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileName               string        `protobuf:"bytes,1,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`                                                    //This is the full path of the file where the line of code is paused.
	MethodName             string        `protobuf:"bytes,2,opt,name=method_name,json=methodName,proto3" json:"method_name,omitempty"`                                              // This is the method or function name that is being called.
	LineNumber             uint32        `protobuf:"varint,3,opt,name=line_number,json=lineNumber,proto3" json:"line_number,omitempty"`                                             //This is the line number where the program is paused.
	ClassName              *string       `protobuf:"bytes,4,opt,name=class_name,json=className,proto3,oneof" json:"class_name,omitempty"`                                           //The class name of where the function is defined
	IsAsync                *bool         `protobuf:"varint,5,opt,name=is_async,json=isAsync,proto3,oneof" json:"is_async,omitempty"`                                                //This indicates that the frame is an async frame
	ColumnNumber           *uint32       `protobuf:"varint,6,opt,name=column_number,json=columnNumber,proto3,oneof" json:"column_number,omitempty"`                                 //This is the column number for the line, primarily used in node.
	TranspiledFileName     *string       `protobuf:"bytes,7,opt,name=transpiled_file_name,json=transpiledFileName,proto3,oneof" json:"transpiled_file_name,omitempty"`              //The name of the transpiled file. If we have mappings available we can map the file 'something.js' to the original typescript. This will be the transpiled file name e.g. something.js
	TranspiledLineNumber   *uint32       `protobuf:"varint,8,opt,name=transpiled_line_number,json=transpiledLineNumber,proto3,oneof" json:"transpiled_line_number,omitempty"`       //The transpiled line number
	TranspiledColumnNumber *uint32       `protobuf:"varint,9,opt,name=transpiled_column_number,json=transpiledColumnNumber,proto3,oneof" json:"transpiled_column_number,omitempty"` //The transpiled column number
	Variables              []*VariableID `protobuf:"bytes,10,rep,name=variables,proto3" json:"variables,omitempty"`                                                                 //This is the list of variables (using var ids) that are present at this point in the code.
	AppFrame               *bool         `protobuf:"varint,11,opt,name=app_frame,json=appFrame,proto3,oneof" json:"app_frame,omitempty"`                                            //This indicates if the frame is from inside the app, or is from a library
}

func (x *StackFrame) Reset() {
	*x = StackFrame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deepproto_proto_tracepoint_v1_tracepoint_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StackFrame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StackFrame) ProtoMessage() {}

func (x *StackFrame) ProtoReflect() protoreflect.Message {
	mi := &file_deepproto_proto_tracepoint_v1_tracepoint_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StackFrame.ProtoReflect.Descriptor instead.
func (*StackFrame) Descriptor() ([]byte, []int) {
	return file_deepproto_proto_tracepoint_v1_tracepoint_proto_rawDescGZIP(), []int{3}
}

func (x *StackFrame) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *StackFrame) GetMethodName() string {
	if x != nil {
		return x.MethodName
	}
	return ""
}

func (x *StackFrame) GetLineNumber() uint32 {
	if x != nil {
		return x.LineNumber
	}
	return 0
}

func (x *StackFrame) GetClassName() string {
	if x != nil && x.ClassName != nil {
		return *x.ClassName
	}
	return ""
}

func (x *StackFrame) GetIsAsync() bool {
	if x != nil && x.IsAsync != nil {
		return *x.IsAsync
	}
	return false
}

func (x *StackFrame) GetColumnNumber() uint32 {
	if x != nil && x.ColumnNumber != nil {
		return *x.ColumnNumber
	}
	return 0
}

func (x *StackFrame) GetTranspiledFileName() string {
	if x != nil && x.TranspiledFileName != nil {
		return *x.TranspiledFileName
	}
	return ""
}

func (x *StackFrame) GetTranspiledLineNumber() uint32 {
	if x != nil && x.TranspiledLineNumber != nil {
		return *x.TranspiledLineNumber
	}
	return 0
}

func (x *StackFrame) GetTranspiledColumnNumber() uint32 {
	if x != nil && x.TranspiledColumnNumber != nil {
		return *x.TranspiledColumnNumber
	}
	return 0
}

func (x *StackFrame) GetVariables() []*VariableID {
	if x != nil {
		return x.Variables
	}
	return nil
}

func (x *StackFrame) GetAppFrame() bool {
	if x != nil && x.AppFrame != nil {
		return *x.AppFrame
	}
	return false
}

type WatchResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expression string `protobuf:"bytes,1,opt,name=expression,proto3" json:"expression,omitempty"` // the expression executed to collect the data
	// Types that are assignable to Result:
	//	*WatchResult_GoodResult
	//	*WatchResult_ErrorResult
	Result isWatchResult_Result `protobuf_oneof:"result"`
}

func (x *WatchResult) Reset() {
	*x = WatchResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deepproto_proto_tracepoint_v1_tracepoint_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchResult) ProtoMessage() {}

func (x *WatchResult) ProtoReflect() protoreflect.Message {
	mi := &file_deepproto_proto_tracepoint_v1_tracepoint_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchResult.ProtoReflect.Descriptor instead.
func (*WatchResult) Descriptor() ([]byte, []int) {
	return file_deepproto_proto_tracepoint_v1_tracepoint_proto_rawDescGZIP(), []int{4}
}

func (x *WatchResult) GetExpression() string {
	if x != nil {
		return x.Expression
	}
	return ""
}

func (m *WatchResult) GetResult() isWatchResult_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (x *WatchResult) GetGoodResult() *VariableID {
	if x, ok := x.GetResult().(*WatchResult_GoodResult); ok {
		return x.GoodResult
	}
	return nil
}

func (x *WatchResult) GetErrorResult() string {
	if x, ok := x.GetResult().(*WatchResult_ErrorResult); ok {
		return x.ErrorResult
	}
	return ""
}

type isWatchResult_Result interface {
	isWatchResult_Result()
}

type WatchResult_GoodResult struct {
	GoodResult *VariableID `protobuf:"bytes,2,opt,name=good_result,json=goodResult,proto3,oneof"` // the ID of the variable that represents the result
}

type WatchResult_ErrorResult struct {
	ErrorResult string `protobuf:"bytes,3,opt,name=error_result,json=errorResult,proto3,oneof"` // this is to contain the error message generated if the watch expression fails
}

func (*WatchResult_GoodResult) isWatchResult_Result() {}

func (*WatchResult_ErrorResult) isWatchResult_Result() {}

type Snapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID            []byte               `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`                                                                                                                        // the client generated ID for this snapshot
	Tracepoint    *TracePointConfig    `protobuf:"bytes,2,opt,name=tracepoint,proto3" json:"tracepoint,omitempty"`                                                                                                        // the config that was used to generate this snapshot (it could be deleted by the time we look at the data)
	VarLookup     map[string]*Variable `protobuf:"bytes,3,rep,name=var_lookup,json=varLookup,proto3" json:"var_lookup,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // this is a flat list of all the collected variables for this snapshot, to reduce data size we dereference as much as we can
	TsNanos       uint64               `protobuf:"fixed64,4,opt,name=ts_nanos,json=tsNanos,proto3" json:"ts_nanos,omitempty"`                                                                                             // the time in nanos since 1970 when this snapshot was generated
	Frames        []*StackFrame        `protobuf:"bytes,5,rep,name=frames,proto3" json:"frames,omitempty"`                                                                                                                // the active frames at the time the snapshot is generated
	Watches       []*WatchResult       `protobuf:"bytes,6,rep,name=watches,proto3" json:"watches,omitempty"`                                                                                                              // the watches results
	Attributes    []*v1.KeyValue       `protobuf:"bytes,7,rep,name=attributes,proto3" json:"attributes,omitempty"`                                                                                                        // the attributes for this snapshot (e.g file_name or line_no)
	NanosDuration uint64               `protobuf:"varint,8,opt,name=nanos_duration,json=nanosDuration,proto3" json:"nanos_duration,omitempty"`                                                                            // the time in nano seconds it took to collect the data
	Resource      []*v1.KeyValue       `protobuf:"bytes,9,rep,name=resource,proto3" json:"resource,omitempty"`                                                                                                            // the resource for this snapshot (e.g service.name)
}

func (x *Snapshot) Reset() {
	*x = Snapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deepproto_proto_tracepoint_v1_tracepoint_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Snapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Snapshot) ProtoMessage() {}

func (x *Snapshot) ProtoReflect() protoreflect.Message {
	mi := &file_deepproto_proto_tracepoint_v1_tracepoint_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Snapshot.ProtoReflect.Descriptor instead.
func (*Snapshot) Descriptor() ([]byte, []int) {
	return file_deepproto_proto_tracepoint_v1_tracepoint_proto_rawDescGZIP(), []int{5}
}

func (x *Snapshot) GetID() []byte {
	if x != nil {
		return x.ID
	}
	return nil
}

func (x *Snapshot) GetTracepoint() *TracePointConfig {
	if x != nil {
		return x.Tracepoint
	}
	return nil
}

func (x *Snapshot) GetVarLookup() map[string]*Variable {
	if x != nil {
		return x.VarLookup
	}
	return nil
}

func (x *Snapshot) GetTsNanos() uint64 {
	if x != nil {
		return x.TsNanos
	}
	return 0
}

func (x *Snapshot) GetFrames() []*StackFrame {
	if x != nil {
		return x.Frames
	}
	return nil
}

func (x *Snapshot) GetWatches() []*WatchResult {
	if x != nil {
		return x.Watches
	}
	return nil
}

func (x *Snapshot) GetAttributes() []*v1.KeyValue {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *Snapshot) GetNanosDuration() uint64 {
	if x != nil {
		return x.NanosDuration
	}
	return 0
}

func (x *Snapshot) GetResource() []*v1.KeyValue {
	if x != nil {
		return x.Resource
	}
	return nil
}

type SnapshotResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SnapshotResponse) Reset() {
	*x = SnapshotResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deepproto_proto_tracepoint_v1_tracepoint_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnapshotResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnapshotResponse) ProtoMessage() {}

func (x *SnapshotResponse) ProtoReflect() protoreflect.Message {
	mi := &file_deepproto_proto_tracepoint_v1_tracepoint_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnapshotResponse.ProtoReflect.Descriptor instead.
func (*SnapshotResponse) Descriptor() ([]byte, []int) {
	return file_deepproto_proto_tracepoint_v1_tracepoint_proto_rawDescGZIP(), []int{6}
}

var File_deepproto_proto_tracepoint_v1_tracepoint_proto protoreflect.FileDescriptor

var file_deepproto_proto_tracepoint_v1_tracepoint_proto_rawDesc = []byte{
	0x0a, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x1d, 0x64, 0x65, 0x65, 0x70, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x1a,
	0x26, 0x64, 0x65, 0x65, 0x70, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf9, 0x01, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x63,
	0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x4d, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x39, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x72, 0x61, 0x63, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x41, 0x72, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x77, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x07, 0x77, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x1a, 0x37, 0x0a, 0x09, 0x41, 0x72,
	0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x4e, 0x0a, 0x0a, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x49,
	0x44, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49,
	0x44, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x73, 0x22, 0xc0, 0x01, 0x0a, 0x08, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x45,
	0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x44, 0x52, 0x08, 0x63, 0x68, 0x69,
	0x6c, 0x64, 0x72, 0x65, 0x6e, 0x12, 0x21, 0x0a, 0x09, 0x74, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x09, 0x74, 0x72, 0x75, 0x6e,
	0x63, 0x61, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x72, 0x75,
	0x6e, 0x63, 0x61, 0x74, 0x65, 0x64, 0x22, 0x82, 0x05, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x63, 0x6b,
	0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6c, 0x69, 0x6e, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x61,
	0x73, 0x79, 0x6e, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x07, 0x69, 0x73,
	0x41, 0x73, 0x79, 0x6e, 0x63, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x48,
	0x02, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x88,
	0x01, 0x01, 0x12, 0x35, 0x0a, 0x14, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x69, 0x6c, 0x65, 0x64,
	0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x03, 0x52, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x69, 0x6c, 0x65, 0x64, 0x46, 0x69,
	0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x16, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x70, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x04, 0x52, 0x14, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x70, 0x69, 0x6c, 0x65, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x18, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x69, 0x6c,
	0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x05, 0x52, 0x16, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x69, 0x6c, 0x65, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x88, 0x01, 0x01, 0x12, 0x47, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x49,
	0x44, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x09,
	0x61, 0x70, 0x70, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x06, 0x52, 0x08, 0x61, 0x70, 0x70, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x69, 0x73, 0x5f, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x17, 0x0a, 0x15,
	0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x69, 0x6c, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x69, 0x6c, 0x65, 0x64, 0x5f,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x22, 0xaa, 0x01, 0x0a, 0x0b,
	0x57, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x65,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x0b, 0x67,
	0x6f, 0x6f, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x44, 0x48, 0x00, 0x52, 0x0a, 0x67,
	0x6f, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x23, 0x0a, 0x0c, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x0b, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x08,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xfa, 0x04, 0x0a, 0x08, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x02, 0x49, 0x44, 0x12, 0x4f, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x63, 0x65, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x64, 0x65, 0x65, 0x70,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x55, 0x0a, 0x0a, 0x76, 0x61, 0x72, 0x5f, 0x6c, 0x6f,
	0x6f, 0x6b, 0x75, 0x70, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x64, 0x65, 0x65,
	0x70, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x2e, 0x56, 0x61, 0x72, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x09, 0x76, 0x61, 0x72, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x12, 0x19, 0x0a,
	0x08, 0x74, 0x73, 0x5f, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x06, 0x52,
	0x07, 0x74, 0x73, 0x4e, 0x61, 0x6e, 0x6f, 0x73, 0x12, 0x41, 0x0a, 0x06, 0x66, 0x72, 0x61, 0x6d,
	0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x46, 0x72,
	0x61, 0x6d, 0x65, 0x52, 0x06, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x07, 0x77,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x64,
	0x65, 0x65, 0x70, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x77, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x73, 0x12, 0x43, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x5f,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d,
	0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a,
	0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x65, 0x79, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x1a, 0x65,
	0x0a, 0x0e, 0x56, 0x61, 0x72, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x3d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x12, 0x0a, 0x10, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x75, 0x0a, 0x0f, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x62, 0x0a, 0x04,
	0x73, 0x65, 0x6e, 0x64, 0x12, 0x27, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x1a, 0x2f, 0x2e,
	0x64, 0x65, 0x65, 0x70, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x42, 0x5c, 0x0a, 0x26, 0x63, 0x6f, 0x6d, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x67, 0x72, 0x61,
	0x6c, 0x2e, 0x64, 0x65, 0x65, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x50, 0x01, 0x5a, 0x30, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x67, 0x72,
	0x61, 0x6c, 0x2f, 0x67, 0x6f, 0x2d, 0x64, 0x65, 0x65, 0x70, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_deepproto_proto_tracepoint_v1_tracepoint_proto_rawDescOnce sync.Once
	file_deepproto_proto_tracepoint_v1_tracepoint_proto_rawDescData = file_deepproto_proto_tracepoint_v1_tracepoint_proto_rawDesc
)

func file_deepproto_proto_tracepoint_v1_tracepoint_proto_rawDescGZIP() []byte {
	file_deepproto_proto_tracepoint_v1_tracepoint_proto_rawDescOnce.Do(func() {
		file_deepproto_proto_tracepoint_v1_tracepoint_proto_rawDescData = protoimpl.X.CompressGZIP(file_deepproto_proto_tracepoint_v1_tracepoint_proto_rawDescData)
	})
	return file_deepproto_proto_tracepoint_v1_tracepoint_proto_rawDescData
}

var file_deepproto_proto_tracepoint_v1_tracepoint_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_deepproto_proto_tracepoint_v1_tracepoint_proto_goTypes = []interface{}{
	(*TracePointConfig)(nil), // 0: deepproto.proto.tracepoint.v1.TracePointConfig
	(*VariableID)(nil),       // 1: deepproto.proto.tracepoint.v1.VariableID
	(*Variable)(nil),         // 2: deepproto.proto.tracepoint.v1.Variable
	(*StackFrame)(nil),       // 3: deepproto.proto.tracepoint.v1.StackFrame
	(*WatchResult)(nil),      // 4: deepproto.proto.tracepoint.v1.WatchResult
	(*Snapshot)(nil),         // 5: deepproto.proto.tracepoint.v1.Snapshot
	(*SnapshotResponse)(nil), // 6: deepproto.proto.tracepoint.v1.SnapshotResponse
	nil,                      // 7: deepproto.proto.tracepoint.v1.TracePointConfig.ArgsEntry
	nil,                      // 8: deepproto.proto.tracepoint.v1.Snapshot.VarLookupEntry
	(*v1.KeyValue)(nil),      // 9: deepproto.proto.common.v1.KeyValue
}
var file_deepproto_proto_tracepoint_v1_tracepoint_proto_depIdxs = []int32{
	7,  // 0: deepproto.proto.tracepoint.v1.TracePointConfig.args:type_name -> deepproto.proto.tracepoint.v1.TracePointConfig.ArgsEntry
	1,  // 1: deepproto.proto.tracepoint.v1.Variable.children:type_name -> deepproto.proto.tracepoint.v1.VariableID
	1,  // 2: deepproto.proto.tracepoint.v1.StackFrame.variables:type_name -> deepproto.proto.tracepoint.v1.VariableID
	1,  // 3: deepproto.proto.tracepoint.v1.WatchResult.good_result:type_name -> deepproto.proto.tracepoint.v1.VariableID
	0,  // 4: deepproto.proto.tracepoint.v1.Snapshot.tracepoint:type_name -> deepproto.proto.tracepoint.v1.TracePointConfig
	8,  // 5: deepproto.proto.tracepoint.v1.Snapshot.var_lookup:type_name -> deepproto.proto.tracepoint.v1.Snapshot.VarLookupEntry
	3,  // 6: deepproto.proto.tracepoint.v1.Snapshot.frames:type_name -> deepproto.proto.tracepoint.v1.StackFrame
	4,  // 7: deepproto.proto.tracepoint.v1.Snapshot.watches:type_name -> deepproto.proto.tracepoint.v1.WatchResult
	9,  // 8: deepproto.proto.tracepoint.v1.Snapshot.attributes:type_name -> deepproto.proto.common.v1.KeyValue
	9,  // 9: deepproto.proto.tracepoint.v1.Snapshot.resource:type_name -> deepproto.proto.common.v1.KeyValue
	2,  // 10: deepproto.proto.tracepoint.v1.Snapshot.VarLookupEntry.value:type_name -> deepproto.proto.tracepoint.v1.Variable
	5,  // 11: deepproto.proto.tracepoint.v1.SnapshotService.send:input_type -> deepproto.proto.tracepoint.v1.Snapshot
	6,  // 12: deepproto.proto.tracepoint.v1.SnapshotService.send:output_type -> deepproto.proto.tracepoint.v1.SnapshotResponse
	12, // [12:13] is the sub-list for method output_type
	11, // [11:12] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_deepproto_proto_tracepoint_v1_tracepoint_proto_init() }
func file_deepproto_proto_tracepoint_v1_tracepoint_proto_init() {
	if File_deepproto_proto_tracepoint_v1_tracepoint_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_deepproto_proto_tracepoint_v1_tracepoint_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TracePointConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deepproto_proto_tracepoint_v1_tracepoint_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VariableID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deepproto_proto_tracepoint_v1_tracepoint_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Variable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deepproto_proto_tracepoint_v1_tracepoint_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StackFrame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deepproto_proto_tracepoint_v1_tracepoint_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deepproto_proto_tracepoint_v1_tracepoint_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Snapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deepproto_proto_tracepoint_v1_tracepoint_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnapshotResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_deepproto_proto_tracepoint_v1_tracepoint_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_deepproto_proto_tracepoint_v1_tracepoint_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_deepproto_proto_tracepoint_v1_tracepoint_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*WatchResult_GoodResult)(nil),
		(*WatchResult_ErrorResult)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_deepproto_proto_tracepoint_v1_tracepoint_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_deepproto_proto_tracepoint_v1_tracepoint_proto_goTypes,
		DependencyIndexes: file_deepproto_proto_tracepoint_v1_tracepoint_proto_depIdxs,
		MessageInfos:      file_deepproto_proto_tracepoint_v1_tracepoint_proto_msgTypes,
	}.Build()
	File_deepproto_proto_tracepoint_v1_tracepoint_proto = out.File
	file_deepproto_proto_tracepoint_v1_tracepoint_proto_rawDesc = nil
	file_deepproto_proto_tracepoint_v1_tracepoint_proto_goTypes = nil
	file_deepproto_proto_tracepoint_v1_tracepoint_proto_depIdxs = nil
}
